// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
//checking if we need to load to A by checking the 6th bit and the most significant bit.
    Not(in=instruction[15], out=notOpcode);
    Mux16(a=instruction, b=AluOut, sel=instruction[15], out=outInst);
    Or(a=notOpcode, b=instruction[5], out=LoadA);
    ARegister(in=outInst, load=LoadA, out=A, out[0..14]=addressM);

//checking if theinformation coming to the ALU from A or from M
    And(a=instruction[15], b=instruction[12], out=AOrMSwitch);
    Mux16(a=A, b=inM, sel=AOrMSwitch, out=AOrM);

//checking if we need to load to D by checking the 5th bit and the most significant bit.
    And(a=instruction[15], b=instruction[4], out=LoadD);
    DRegister(in=AluOut, load=LoadD, out=D);
    ALU(x=D, y=AOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=AluOut, out=outM, zr=zrOut, ng=ngOut);

//In order to write to M we need that the 4th bit and the 16th bit will be true
    And(a=instruction[15], b=instruction[3], out=writeM);

//Creating D > 0
    Not(in=zrOut, out=NotZr);
    Not(in=ngOut, out=NotNg);
    And(a=NotZr, b=NotNg, out=pos);

//if D > 0 and the least and most significant bits are true, we need to jump.
    And(a=instruction[15], b=instruction[0], out=jgtOrjgeOrjneOrjmp);
    And(a=pos, b=jgtOrjgeOrjneOrjmp, out=load1);

//if D==0 and the 2nd bit and the most significant bit are true, we need to jump.
    And(a=instruction[15], b=instruction[1], out=jeqOrjgeOrjleOrjmp);
    And(a=zrOut, b=jeqOrjgeOrjleOrjmp, out=load2);

//if D < 0 and the 3rd bit and the most significant bit are true, we need to jump.
    And(a=instruction[15], b=instruction[2], out=jltOrjneOrjleOrjmp);
    And(a=ngOut, b=jltOrjneOrjleOrjmp, out=load3);

//check if one of the cases is true, if it is, we need to load to PC.
    Or(a=load1, b=load2, out=load4);
    Or(a=load3, b=load4, out=LoadPc);

    PC(in=A, load=LoadPc, inc=true, reset=reset, out[0..14]=pc);
}